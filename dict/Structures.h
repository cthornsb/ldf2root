/** \file Structures.h
 * \brief Data structures for root output
 *
 * Special data types for Root output. Each individual processor which is
 * is used in the scan code should have its own Structure class. These classes
 * should contain simple C++ data types or vectors of simple C++ data types.
 * Vectors should be used for processors which are likely to have multiplicities
 * greater than one.

 * File automatically generated by
 *  RootClassBuilder (v. 1.0.4) on Tue Jun 20 00:15:17 2017
 *
 * \author C. Thornsbery
 * \date Sept. 25, 2014
 */

#ifndef ROOTDATAStructure_H
#define ROOTDATAStructure_H

#include "TObject.h"

#include <vector>

class Structure : public TObject {
  protected:
	std::string name; //! Structure name

  public:
	Structure(const std::string &name_=""){ name = name_; }

	virtual ~Structure(){}

	virtual void Zero(){}

	virtual Structure &operator = (const Structure &other_){ return Set(other_); }

	virtual Structure &Set(const Structure &other_){ return *this; }

	virtual Structure &Set(Structure *other_){ return *this; }

	ClassDef(Structure, 1); // Structure
};

class Trace : public TObject {
  protected:
	std::string name; //! Trace name

  public:
	std::vector<unsigned short> wave;
	unsigned int mult;

	Trace(const std::string &name_="");

	~Trace(){}

	void Zero();

	Trace &operator = (const Trace &other_){ return Set(other_); }

	Trace &Set(const Trace &other_);

	Trace &Set(Trace *other_);

	void Append(unsigned short *arr_, const size_t &size_);

	ClassDef(Trace, 1); // Trace
};

/** CaenV775EventStructure
 * \brief Event from a Caen V775 ADC
 *
 * Event from a Caen V775 ADC
 */
class CaenV775EventStructure : public Structure {
  public:
	std::vector<unsigned short> chan; /// Channel.
	std::vector<unsigned short> adc; /// 12-bit ADC value.
	std::vector<bool> over; /// Overflow.
	std::vector<bool> under; /// Underflow.
	std::vector<bool> valid; /// Valid channel fire.

	/// Default constructor
	CaenV775EventStructure();

	/// Copy constructor
	CaenV775EventStructure(const CaenV775EventStructure &other_);

	/// Destructor. Does nothing
	~CaenV775EventStructure(){}

	/// Push back with data
	void Append(const unsigned short &chan_, const unsigned short &adc_, const bool &over_, const bool &under_, const bool &valid_);

	/// Zero the data Structure
	void Zero();

	/// Assignment operator
	CaenV775EventStructure &operator = (const CaenV775EventStructure &other_);

	/// Set all values to that of other_
	CaenV775EventStructure &Set(const CaenV775EventStructure &other_);

	/// Set all values to that of other_
	CaenV775EventStructure &Set(CaenV775EventStructure *other_);

	ClassDef(CaenV775EventStructure, 1); // CaenV775Event
};

#endif
